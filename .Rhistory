ll_value <- lapply(X = fits$analyses, FUN = prof_ll, x = x, index = index)
ll_value
avg_ll   <- mean(ll_value)
ll_value <- sapply(X = fits$analyses, FUN = prof_ll, x = x, index = index)
ll_value
x_start <- unlist(fits$analyses[[1]]$ST)[index]
ci.lb   <- optim(x_start, score_prog_ll, alpha = alpha/2, fits = fits)
x_start
fits
ll_value <- sapply(X = fits$analyses, FUN = prof_ll, x = x, index = index)
avg_ll   <- mean(ll_value)
score <- (avg_ll - alpha)^2
score
score_prog_ll <- function(x, fits, index, alpha){
ll_value <- sapply(X = fits$analyses, FUN = prof_ll, x = x, index = index)
avg_ll   <- mean(ll_value)
score <- (avg_ll - alpha)^2
return(score)
}
prof_ll <- function(fitted, x, index){
start <- list(fitted$coefficients, unlist(fitted$ST))
gamma <- start[[2]][index]
start[[2]][index] <- x
fit_prof <- update(fitted, start = start, eval.max = 1)
res <- sign(x - gamma) * sqrt(-2 * (fit_prof$logLik - fitted$logLik))
return(res)
}
x_start <- unlist(fits$analyses[[1]]$ST)[index]
ci.lb   <- optim(x_start, score_prog_ll, alpha = alpha/2, fits = fits)
ci.lb
ci.lb$par
x
?optimize
?uniroot
ci.lb   <- nlm(p = x_start, f = score_prog_ll, alpha = alpha/2, fits = fits)
?optimize
ci.lb   <- optimize(f = score_prog_ll, interval = c(0, 25), alpha = alpha/2, fits = fits)
?optimize
?optim
ci.lb   <- optim(par = x_start, fn = score_prog_ll, interval = c(0, 25),
alpha = alpha/2, fits = fits)
ci.lb   <- optim(par = x_start, fn = score_prog_ll,
alpha = alpha/2, fits = fits)
ci.lb   <- supressWarnings(optim(par = x_start, fn = score_prog_ll,
alpha = alpha/2, fits = fits))
ci.lb   <- suppressWarnings(optim(par = x_start, fn = score_prog_ll,
alpha = alpha/2, fits = fits))
ci.ub   <- suppressWarnings(optimize(f = score_prog_ll, interval = c(0, 10),
alpha = 1 - alpha/2, fits = fits))
ci.ub
ci.ub$convergence <-0
ci.lb
ci.lb$par
ci.ub$par
x <- fits
n_re <- 2
conf_int <- matrix(nrow = n_re, ncol = 2)
for(i in 1:n_re){
conf_int <- prof_ci(fits = x, index = i)
}
#' Compute the profiled likelihood for the standard deviation for the random
#' effect in a fitted cumulative mixed model.
#'
profile.clmm <- function(fitted, alpha = 0.01, n_steps = 200){
n_re <- length(fitted$ST)
wald_se <- sqrt(diag(vcov(fitted)))
wald_se <- wald_se[(length(wald_se) - n_re + 1):length(wald_se)]
mu <- log(unlist(fitted$ST))
x_profile <- matrix(nrow = n_steps, ncol = n_re)
for(i in 1:n_re){
x_profile[, i] <- seq(mu[i] - qnorm(1 - alpha/2) * wald_se[i],
mu[i] + qnorm(1 - alpha/2) * wald_se[i],
length.out = n_steps)
}
y_profile <- matrix(nrow = n_steps, ncol = n_re)
for(i in 1:n_re){
mu_start    <- mu
for(j in 1:n_steps){
mu_start[i]   <- x_profile[j, i]
start         <- list(fitted$coefficients, exp(mu_start))
fit_prof      <- update(fitted, start = start, eval.max = 1)
y_profile[j, i] <- -2 * (fit_prof$logLik - fitted$logLik)
}
}
res <- list(x_profile, y_profile)
}
prof_ci <- function(fits, alpha = 0.05, index){
# Function to calculate the profile confidence interval around the
# variance of the random effect,
x_start <- unlist(fits$analyses[[1]]$ST)[index]
ci.lb   <- suppressWarnings(optim(par = x_start, fn = score_prog_ll,
alpha = alpha/2, fits = fits))
ci.ub   <- suppressWarnings(optimi(par = x_start, fn = score_prog_ll,
alpha = 1 - alpha/2, fits = fits))
if(ci.lb$convergence!=0|ci.ub$convergence!=0){
warning("Convergence error when calculating the confidence interval for\n
the variance of the random effect. Results are likely to be wrong.")
}
return(c(ci.lb$par, ci.ub$par))
}
score_prog_ll <- function(x, fits, index, alpha){
ll_value <- sapply(X = fits$analyses, FUN = prof_ll, x = x, index = index)
avg_ll   <- mean(ll_value)
score <- (avg_ll - alpha)^2
return(score)
}
prof_ll <- function(fitted, x, index){
start <- list(fitted$coefficients, unlist(fitted$ST))
gamma <- start[[2]][index]
start[[2]][index] <- x
fit_prof <- update(fitted, start = start, eval.max = 1)
res <- sign(x - gamma) * sqrt(-2 * (fit_prof$logLik - fitted$logLik))
return(res)
}
conf_int <- prof_ci(fits = x, index = i)
for(i in 1:n_re){
conf_int <- prof_ci(fits = x, index = i)
}
#' Compute the profiled likelihood for the standard deviation for the random
#' effect in a fitted cumulative mixed model.
#'
profile.clmm <- function(fitted, alpha = 0.01, n_steps = 200){
n_re <- length(fitted$ST)
wald_se <- sqrt(diag(vcov(fitted)))
wald_se <- wald_se[(length(wald_se) - n_re + 1):length(wald_se)]
mu <- log(unlist(fitted$ST))
x_profile <- matrix(nrow = n_steps, ncol = n_re)
for(i in 1:n_re){
x_profile[, i] <- seq(mu[i] - qnorm(1 - alpha/2) * wald_se[i],
mu[i] + qnorm(1 - alpha/2) * wald_se[i],
length.out = n_steps)
}
y_profile <- matrix(nrow = n_steps, ncol = n_re)
for(i in 1:n_re){
mu_start    <- mu
for(j in 1:n_steps){
mu_start[i]   <- x_profile[j, i]
start         <- list(fitted$coefficients, exp(mu_start))
fit_prof      <- update(fitted, start = start, eval.max = 1)
y_profile[j, i] <- -2 * (fit_prof$logLik - fitted$logLik)
}
}
res <- list(x_profile, y_profile)
}
prof_ci <- function(fits, alpha = 0.05, index){
# Function to calculate the profile confidence interval around the
# variance of the random effect,
x_start <- unlist(fits$analyses[[1]]$ST)[index]
ci.lb   <- suppressWarnings(optim(par = x_start, fn = score_prog_ll,
alpha = alpha/2, fits = fits))
ci.ub   <- suppressWarnings(optim(par = x_start, fn = score_prog_ll,
alpha = 1 - alpha/2, fits = fits))
if(ci.lb$convergence!=0|ci.ub$convergence!=0){
warning("Convergence error when calculating the confidence interval for\n
the variance of the random effect. Results are likely to be wrong.")
}
return(c(ci.lb$par, ci.ub$par))
}
score_prog_ll <- function(x, fits, index, alpha){
ll_value <- sapply(X = fits$analyses, FUN = prof_ll, x = x, index = index)
avg_ll   <- mean(ll_value)
score <- (avg_ll - alpha)^2
return(score)
}
prof_ll <- function(fitted, x, index){
start <- list(fitted$coefficients, unlist(fitted$ST))
gamma <- start[[2]][index]
start[[2]][index] <- x
fit_prof <- update(fitted, start = start, eval.max = 1)
res <- sign(x - gamma) * sqrt(-2 * (fit_prof$logLik - fitted$logLik))
return(res)
}
for(i in 1:n_re){
conf_int <- prof_ci(fits = x, index = i)
}
conf_int <- matrix(nrow = n_re, ncol = 2)
for(i in 1:n_re){
conf_int[i, ] <- prof_ci(fits = x, index = i)
}
i
x
for(i in 1:n_re){
conf_int[i, ] <- prof_ci(fits = x, index = i)
}
library(ordinalimputation)
pooling.clmm(x, conf.int.re = "pro")
pooling.clmm(x, conf.int.re = "profile")
x
pooling.clmm(x, conf.int.re = "profile")
#' @param x an mira object returned from the with.mids function from the mice
#'          package.
#' @param conf.int.re Type of 95% confidence interval for the variance of the
#'                    random effect to be calculated. Default is none.
#'
#' @return A pooled.clmm object. With the following elements:
#' @slot fixed_effects Pooled fixed effect estimates and associated standard errors.
#' @slot random_effects Pooled modes of random effects with associated conditional variances.
#' @slot random_dist Standard deviation of the random effect distribution and associated median odds ratio
#' @slot conf_in_re Optional 95% confidence interval of the variance of the random effects.
pooling.clmm <- function(x, conf.int.re = c("none", "profile")){
conf.int.re <- match.arg(conf.int.re)
x <- x$analyses
# Pool fixed effects and standard deviation random effect.
coefs        <- sapply(X = x, FUN = coefficients)
std_re       <- sapply(X = lapply(X = x, FUN = get_re_std),
FUN = unlist)
vcov_fits    <- lapply(X = x, FUN = vcov)
coefs_fit    <- t(rbind(coefs, std_re))
pool_fixed <- pool_rubin(coefs = coefs_fit, variance = vcov_fits)
n_re       <- ncol(std_re)
mu_fixed   <- pool_fixed$estimate[1:(ncol(coefs_fit) - n_re)]
se_fixed   <- sqrt(diag(pool_fixed$variance)[1:(ncol(coefs_fit) - n_re)])
ci_l_fixed <- mu_fixed - 1.96 * se_fixed
ci_u_fixed <- mu_fixed + 1.96 * se_fixed
fixef      <- cbind(mu_fixed, ci_l_fixed, ci_u_fixed)
rownames(fixef) <- names(pool_fixed$estimate[1:(ncol(coefs_fit) - n_re)])
colnames(fixef) <- c("Estimate", "Lower 95% CI", "Upper 95% CI")
std_dev <- pool_fixed$estimate[(ncol(coefs_fit) - n_re + 1):ncol(coefs_fit)]
mor     <- exp(sqrt(2 * std_dev^2) * qnorm(0.75))
std_re  <- data.frame(std_dev = std_dev, mor = mor)
if(conf.int.re=="profile"){
cat("Calculating profile likelihood, may take a very long time.")
conf_int <- matrix(nrow = n_re, ncol = 2)
for(i in 1:n_re){
conf_int[i, ] <- prof_ci(fits = x, index = i)
}
}else{
conf_int <- NULL
}
ranef_fits   <- t(sapply(X = lapply(X = x, FUN = ranef), FUN = unlist))
condVar_fits <- t(sapply(X = lapply(X = x, FUN = condVar), FUN = unlist))
random_effect <- pool_re(ranef_fits, condVar_fits)
mu_random <- random_effect$mode
se_random <- sqrt(random_effect$cond_var)
ci_l_random <- mu_random - 1.96 * se_random
ci_u_random <- mu_random + 1.96 * se_random
random <- cbind(mu_random, ci_l_random, ci_u_random)
rownames(random) <- 1:nrow(random)
colnames(random) <- c("Estimate", "Lower 95% CI", "Upper 95% CI")
res <- list(fixed_effects = fixef, random_dist = std_re,
random_effects = random, se_fixed = se_fixed,
se_random = se_random, conf_int_re = conf_int)
class(res) <- c("pooled.clmm")
return(res)
}
pooling.clmm(x, conf.int.re = "profile")
pooling(x)
pooling(x$analyses)
pooling.clmm(x$analyses)
x$analyses
pooling.clmm(x$analyses)
# Pool fixed effects and standard deviation random effect.
coefs        <- sapply(X = x, FUN = coefficients)
coefs
x
x
class(x)
x <- x$analyses
# Pool fixed effects and standard deviation random effect.
coefs        <- sapply(X = x, FUN = coefficients)
std_re       <- sapply(X = lapply(X = x, FUN = get_re_std),
FUN = unlist)
vcov_fits    <- lapply(X = x, FUN = vcov)
coefs_fit    <- t(rbind(coefs, std_re))
pool_fixed <- pool_rubin(coefs = coefs_fit, variance = vcov_fits)
n_re       <- ncol(std_re)
mu_fixed   <- pool_fixed$estimate[1:(ncol(coefs_fit) - n_re)]
se_fixed   <- sqrt(diag(pool_fixed$variance)[1:(ncol(coefs_fit) - n_re)])
ci_l_fixed <- mu_fixed - 1.96 * se_fixed
ci_u_fixed <- mu_fixed + 1.96 * se_fixed
fixef      <- cbind(mu_fixed, ci_l_fixed, ci_u_fixed)
rownames(fixef) <- names(pool_fixed$estimate[1:(ncol(coefs_fit) - n_re)])
colnames(fixef) <- c("Estimate", "Lower 95% CI", "Upper 95% CI")
std_dev <- pool_fixed$estimate[(ncol(coefs_fit) - n_re + 1):ncol(coefs_fit)]
mor     <- exp(sqrt(2 * std_dev^2) * qnorm(0.75))
std_re  <- data.frame(std_dev = std_dev, mor = mor)
cat("Calculating profile likelihood, may take a very long time.")
conf_int <- matrix(nrow = n_re, ncol = 2)
conf_int[i, ] <- prof_ci(fits = x, index = i)
#' Compute the profiled likelihood for the standard deviation for the random
#' effect in a fitted cumulative mixed model.
#'
profile.clmm <- function(fitted, alpha = 0.01, n_steps = 200){
n_re <- length(fitted$ST)
wald_se <- sqrt(diag(vcov(fitted)))
wald_se <- wald_se[(length(wald_se) - n_re + 1):length(wald_se)]
mu <- log(unlist(fitted$ST))
x_profile <- matrix(nrow = n_steps, ncol = n_re)
for(i in 1:n_re){
x_profile[, i] <- seq(mu[i] - qnorm(1 - alpha/2) * wald_se[i],
mu[i] + qnorm(1 - alpha/2) * wald_se[i],
length.out = n_steps)
}
y_profile <- matrix(nrow = n_steps, ncol = n_re)
for(i in 1:n_re){
mu_start    <- mu
for(j in 1:n_steps){
mu_start[i]   <- x_profile[j, i]
start         <- list(fitted$coefficients, exp(mu_start))
fit_prof      <- update(fitted, start = start, eval.max = 1)
y_profile[j, i] <- -2 * (fit_prof$logLik - fitted$logLik)
}
}
res <- list(x_profile, y_profile)
}
prof_ci <- function(fits, alpha = 0.05, index){
# Function to calculate the profile confidence interval around the
# variance of the random effect,
x_start <- unlist(fits[[1]]$ST)[index]
ci.lb   <- suppressWarnings(optim(par = x_start, fn = score_prog_ll,
alpha = alpha/2, fits = fits))
ci.ub   <- suppressWarnings(optim(par = x_start, fn = score_prog_ll,
alpha = 1 - alpha/2, fits = fits))
if(ci.lb$convergence!=0|ci.ub$convergence!=0){
warning("Convergence error when calculating the confidence interval for\n
the variance of the random effect. Results are likely to be wrong.")
}
return(c(ci.lb$par, ci.ub$par))
}
score_prog_ll <- function(x, fits, index, alpha){
ll_value <- sapply(X = fits, FUN = prof_ll, x = x, index = index)
avg_ll   <- mean(ll_value)
score <- (avg_ll - alpha)^2
return(score)
}
prof_ll <- function(fitted, x, index){
start <- list(fitted$coefficients, unlist(fitted$ST))
gamma <- start[[2]][index]
start[[2]][index] <- x
fit_prof <- update(fitted, start = start, eval.max = 1)
res <- sign(x - gamma) * sqrt(-2 * (fit_prof$logLik - fitted$logLik))
return(res)
}
conf_int[i, ] <- prof_ci(fits = x, index = i)
#' Calculate pooled estimates of fixed effects, standard deviation of the
#' random effect and conditional modes of the random effect terms.
#'
#' @param x an mira object returned from the with.mids function from the mice
#'          package.
#' @param conf.int.re Type of 95% confidence interval for the variance of the
#'                    random effect to be calculated. Default is none.
#'
#' @return A pooled.clmm object. With the following elements:
#' @slot fixed_effects Pooled fixed effect estimates and associated standard errors.
#' @slot random_effects Pooled modes of random effects with associated conditional variances.
#' @slot random_dist Standard deviation of the random effect distribution and associated median odds ratio
#' @slot conf_in_re Optional 95% confidence interval of the variance of the random effects.
pooling.clmm <- function(x, conf.int.re = c("none", "profile")){
conf.int.re <- match.arg(conf.int.re)
# Pool fixed effects and standard deviation random effect.
coefs        <- sapply(X = x, FUN = coefficients)
std_re       <- sapply(X = lapply(X = x, FUN = get_re_std),
FUN = unlist)
vcov_fits    <- lapply(X = x, FUN = vcov)
coefs_fit    <- t(rbind(coefs, std_re))
pool_fixed <- pool_rubin(coefs = coefs_fit, variance = vcov_fits)
n_re       <- ncol(std_re)
mu_fixed   <- pool_fixed$estimate[1:(ncol(coefs_fit) - n_re)]
se_fixed   <- sqrt(diag(pool_fixed$variance)[1:(ncol(coefs_fit) - n_re)])
ci_l_fixed <- mu_fixed - 1.96 * se_fixed
ci_u_fixed <- mu_fixed + 1.96 * se_fixed
fixef      <- cbind(mu_fixed, ci_l_fixed, ci_u_fixed)
rownames(fixef) <- names(pool_fixed$estimate[1:(ncol(coefs_fit) - n_re)])
colnames(fixef) <- c("Estimate", "Lower 95% CI", "Upper 95% CI")
std_dev <- pool_fixed$estimate[(ncol(coefs_fit) - n_re + 1):ncol(coefs_fit)]
mor     <- exp(sqrt(2 * std_dev^2) * qnorm(0.75))
std_re  <- data.frame(std_dev = std_dev, mor = mor)
if(conf.int.re=="profile"){
cat("Calculating profile likelihood, may take a very long time.\n")
conf_int <- matrix(nrow = n_re, ncol = 2)
for(i in 1:n_re){
conf_int[i, ] <- prof_ci(fits = x, index = i)
}
cat("Number ", i, "done\n")
}else{
conf_int <- NULL
}
ranef_fits   <- t(sapply(X = lapply(X = x, FUN = ranef), FUN = unlist))
condVar_fits <- t(sapply(X = lapply(X = x, FUN = condVar), FUN = unlist))
random_effect <- pool_re(ranef_fits, condVar_fits)
mu_random <- random_effect$mode
se_random <- sqrt(random_effect$cond_var)
ci_l_random <- mu_random - 1.96 * se_random
ci_u_random <- mu_random + 1.96 * se_random
random <- cbind(mu_random, ci_l_random, ci_u_random)
rownames(random) <- 1:nrow(random)
colnames(random) <- c("Estimate", "Lower 95% CI", "Upper 95% CI")
res <- list(fixed_effects = fixef, random_dist = std_re,
random_effects = random, se_fixed = se_fixed,
se_random = se_random, conf_int_re = conf_int)
class(res) <- c("pooled.clmm")
return(res)
}
pooling <- function(x,...){
UseMethod("pooling",x)
}
get_re_std <- function(x){
res <- x$ST
return(res)
}
pool_rubin <- function(coefs, variance){
qbar <- colMeans(coefs)
m            <- length(variance)
bw_imp_var   <- var(coefs)
wi_imp_var   <- Reduce("+", variance)/m
totalVar     <- wi_imp_var + (1 + 1/m) * bw_imp_var
qbar         <- colMeans(coefs)
res <- list(estimate = qbar, variance = totalVar)
}
pool_re <- function(re_mode, condvar){
n_cluster <- ncol(re_mode)
m         <- nrow(re_mode)
res <- data.frame(cluster = 1:n_cluster,
mode = rep(NA, n_cluster),
cond_var = rep(NA, n_cluster))
for(i in 1:n_cluster){
res$mode[i] <- mean(re_mode[, i])
bw_imp_var <- var(re_mode[, i])
wi_imp_var <- mean(condvar[, i])
res$cond_var[i] <- wi_imp_var + (1 + 1/m) * bw_imp_var
}
return(res)
}
print.pooled.clmm <- function(x){
cat("Random effect parameters:\n")
print(x$random_dist)
cat("\n\nFixed effect estimates:\n")
print(x$fixed_effects)
}
pooling.clmm(x)
pooling.clmm(x, conf.int.re = "profile")
fits <- x
x
x_start <- unlist(fits[[1]]$ST)[index]
index <- 2
ci.lb   <- suppressWarnings(optim(par = x_start, fn = score_prog_ll,
alpha = alpha/2, fits = fits))
ci.ub   <- suppressWarnings(optim(par = x_start, fn = score_prog_ll,
alpha = 1 - alpha/2, fits = fits))
ci.lb$convergence
ci.ub$convergence
?optimize
ci.lb   <- optimize(f = score_prog_ll, interval = c(0, 25),
alpha = alpha/2, fits = fits)
prof_ll <- function(fitted, x, index){
start <- list(fitted$coefficients, unlist(fitted$ST))
gamma <- start[[2]][index]
start[[2]][index] <- x
fit_prof <- update(fitted, start = start, eval.max = 1)
res <- pnorm(sign(x - gamma) * sqrt(-2 * (fit_prof$logLik - fitted$logLik)))
return(res)
}
ci.lb   <- optimize(f = score_prog_ll, interval = c(0, 25),
alpha = alpha/2, fits = fits)
ci.ub   <- optimize(f = score_prog_ll, interval = c(0, 25),
alpha = 1 - alpha/2, fits = fits)
ci.lb
ci.ub
x <- seq(0, 25, by = 1)
y <- rep(0, length(x))
fits
class(fits)
x <- seq(0, 25, by = 1)
y <- rep(0, length(x))
for(i in 1:length(x)){
y[i] <- prof_ll(fits[[1]], x[i], index[1])
}
i
plot(x, y)
?optimise
xmax    <- 5 * unlist(fits[[1]]$ST)[index]
ci.lb   <- optimize(f = score_prog_ll, interval = c(0, xmax),
alpha = alpha/2, fits = fits)
prof_ll <- function(fitted, x, index){
start <- list(fitted$coefficients, unlist(fitted$ST))
gamma <- start[[2]][index]
start[[2]][index] <- x
fit_prof <- update(fitted, start = start, eval.max = 1)
res <- sign(x - gamma) * sqrt(-2 * (fit_prof$logLik - fitted$logLik))
return(res)
}
x <- seq(0.1, 1, by = .1)
y <- rep(0, length(x))
for(i in 1:length(x)){
y[i] <- prof_ll(fits[[1]], x[i], index[1])
}
plot(x, y)
prof_ll <- function(fitted, x, index){
start <- list(fitted$coefficients, unlist(fitted$ST))
gamma <- start[[2]][index]
start[[2]][index] <- x
fit_prof <- update(fitted, start = start, eval.max = 1)
res <- pnorm(sign(x - gamma) * sqrt(-2 * (fit_prof$logLik - fitted$logLik)))
return(res)
}
x <- seq(0.1, 1, by = .1)
y <- rep(0, length(x))
for(i in 1:length(x)){
y[i] <- prof_ll(fits[[1]], x[i], index[1])
}
plot(x, y)
ci.lb   <- optimize(f = score_prog_ll, interval = c(0, xmax),
alpha = alpha/2, fits = fits)
xmax
ci.lb
pool.clmm(x)
pooling.clmm(x)
x
x <-fits
fits
pooling.clmm(x)
pooling.clmm(x, conf.int.re = "profile")
